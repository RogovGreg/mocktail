services:
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: mocktail
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Admin@123
    volumes:
      - mocktail_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 2s
      retries: 12

  redis:
    image: redis:7-alpine
    hostname: redis
    container_name: redis
    ports:
      - 6379:6379
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 12

  rabbitmq:
    image: rabbitmq:3-management-alpine
    hostname: rabbitmq
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 12

  backend:
    build:
      context: services/Backend
      dockerfile: Docker/Dockerfile
    container_name: backend
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    expose:
      - "80"

  content:
    build:
      context: services/Content
      dockerfile: Docker/Dockerfile
    container_name: content
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    expose:
      - "80"
      - "8080"

  generator:
    build:
      context: services/Generator
      dockerfile: Docker/Dockerfile
    container_name: generator
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    expose:
      - "80"
      - "8080"

  auth:
    build:
      context: services/Auth
      dockerfile: Docker/Dockerfile
    container_name: auth
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    expose:
      - "80"

  gateway:
    build:
      context: services/Gateway
      dockerfile: Dockerfile
    container_name: gateway
    env_file:
      - .env
    depends_on:
      - backend
      - content
      - generator
      - auth
    ports:
      - "8080:8080"

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    container_name: frontend
    depends_on:
      - gateway
    ports:
      - "80:80"

  # migrations:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.migrations
  #   container_name: migrations
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   env_file:
  #     - .env

volumes:
  mocktail_data:
    external: true
  redis_data:
  rabbitmq_data:
